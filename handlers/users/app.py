from main import *
from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
from utils import funk_async
from keyboards.default.markup import keyboard, keyboard_admin
from utils.privacy import privacy
from filters import IsAdmin


@dp.message_handler(CommandStart())
async def bot_start(message: types.Message):
    if not db.check_subscriber(message.from_user.id):
        db.add_subscriber(message.from_user.id)
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, –±—ã—Å—Ç—Ä–µ–µ –Ω–∞—á–Ω–∏ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è!',
                         reply_markup=keyboard)

#admin hendler

@dp.message_handler(commands=['admin'])
async def command_start(message: types.Message):
    if not await IsAdmin().check(message):
        if not db.why_get_admin(message.from_user.id):
            db.get_admin(message.from_user.id, True)
            await message.answer('‚ö†Ô∏è –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω —Ä–µ–∂–∏–º ‚ö†Ô∏è', reply_markup=keyboard_admin)
        else:
            db.get_admin(message.from_user.id, False)
            await message.answer('‚ùå –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω —Ä–µ–∂–∏–º–∞ ‚ùå', reply_markup=keyboard)
    else:
        db.get_admin(message.from_user.id, False)
        await message.answer('‚ùå –í—ã –Ω–µ –∞–¥–º–∏–Ω, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å ‚ùå', reply_markup=keyboard)


from keyboards.inline.keyboards import *


# async def all_resume(bot, message: types.Message):
#     data = {
#         True: get_all_resume_for_adm,
#         False: get_my_resume,
#     }
#     await data[await IsAdmin().check(message)](message)


async def get_all_resume_for_adm(bot, message: types.Message):
    if not db.get_resume_for_adm():
        await message.answer(f'‚ùå –ù–µ—Ç —Ä–µ–∑—é–º–µ –¥–ª—è –∞–ø—Ä—É–≤–∞ ‚ÄºÔ∏è')
    else:
        for unp in db.get_resume_for_adm():
            id_resume, name, skills, area_of_residence, phone, allow, _, _, _ = unp
            await message.answer(
                f"üë§ –ò–º—è: {name}\nü™õ –ù–∞–≤—ã–∫–∏: {skills}\nüåç –†–∞–π–æ–Ω –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {area_of_residence}\n‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}",
                reply_markup=await get_confirm_admin_resume(id_resume))


#–û–ë—å—è–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–ø—Ä—É–≤–∞ –æ—Ç –∞–¥–º–∏–Ω–∞

async def get_all_announcement_for_adm(bot, message: types.Message):
    if not db.get_announcement_for_adm():
        await message.answer(f'‚ùå –ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –∞–ø—Ä—É–≤–∞ ‚ÄºÔ∏è')
    else:
        for unp in db.get_announcement_for_adm():
            id, type_of_services, job_title, job_description, salary, phone, allow, _, _, _ = unp
            await message.answer(f"–¢–∏–ø: {type_of_services}\n–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏: {job_title}\n–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏: {job_description}\nüí∞ –ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ü–ª–∞—Ç–∞: {salary}\n‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}",
                                   reply_markup=await get_confirm_announcement_admin(id))


data_admin = {
            '–û–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏': get_all_announcement_for_adm,
            '–†–µ–∑—é–º–µ –¥–ª—è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏': get_all_resume_for_adm,
        }









#########


async def error(bot, message):
    await message.delete()

async def send_privacy(bot, message):
    await message.answer(f'{privacy}')


@dp.message_handler(content_types=['text'])
async def command_start_text(message: types.Message):
    data = {
        '–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π': funk_async.all_my_announcement,
        '–ú–æ–∏ –æ–±—å—è–≤–ª–µ–Ω–∏—è': funk_async.my_announcement,
        '–ú–æ–µ –†–µ–∑—é–º–µ': funk_async.my_resume,
        '–í—Å–µ –†–µ–∑—é–º–µ': funk_async.get_all_resume,
        '–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å': send_privacy,
    }
    await data.get(message.text, error)(bot, message)
    await data_admin.get(message.text, error)(bot, message)
